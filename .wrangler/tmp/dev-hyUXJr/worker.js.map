{
  "version": 3,
  "sources": ["../bundle-0tk5fh/checked-fetch.js", "../../../src/worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-0tk5fh/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-0tk5fh/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/yellowcandle/dev/legco-search-mcp/.wrangler/tmp/dev-hyUXJr",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Cloudflare Remote MCP Server Template (authless)\n// See: https://developers.cloudflare.com/agents/guides/remote-mcp-server/\n\nconst BASE_URLS: Record<string, string> = {\n  voting: 'https://app.legco.gov.hk/vrdb/odata/vVotingResult',\n  bills: 'https://app.legco.gov.hk/BillsDB/odata/Vbills',\n  questions_oral: 'https://app.legco.gov.hk/QuestionsDB/odata/ViewOralQuestionsEng',\n  questions_written: 'https://app.legco.gov.hk/QuestionsDB/odata/ViewWrittenQuestionsEng',\n  hansard: 'https://app.legco.gov.hk/OpenData/HansardDB/Hansard',\n  hansard_questions: 'https://app.legco.gov.hk/OpenData/HansardDB/Questions',\n  hansard_bills: 'https://app.legco.gov.hk/OpenData/HansardDB/Bills',\n  hansard_motions: 'https://app.legco.gov.hk/OpenData/HansardDB/Motions',\n  hansard_voting: 'https://app.legco.gov.hk/OpenData/HansardDB/VotingResults',\n};\n\n// --- Error Classes ---\nclass LegCoAPIError extends Error {\n  constructor(\n    message: string,\n    public statusCode?: number,\n    public endpoint?: string,\n    public originalError?: Error\n  ) {\n    super(message);\n    this.name = 'LegCoAPIError';\n  }\n}\n\nclass ValidationError extends Error {\n  constructor(message: string, public field?: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nclass RateLimitError extends Error {\n  constructor(message: string, public retryAfter?: number) {\n    super(message);\n    this.name = 'RateLimitError';\n  }\n}\n\n// --- Enhanced Logging ---\ninterface LogContext {\n  endpoint?: string;\n  ip?: string;\n  method?: string;\n  params?: Record<string, any>;\n  error?: Error;\n  timestamp?: string;\n  requestId?: string;\n  dateStr?: string;\n  value?: any;\n  attempt?: number;\n  maxRetries?: number;\n  url?: string;\n  count?: number;\n  limit?: number;\n  toolName?: string;\n  headers?: Record<string, string>;\n  allowed?: any[];\n  min?: number;\n  max?: number;\n}\n\nfunction logError(message: string, context: LogContext = {}): void {\n  const logEntry = {\n    level: 'ERROR',\n    message,\n    timestamp: new Date().toISOString(),\n    requestId: context.requestId || crypto.randomUUID(),\n    ...context\n  };\n  console.error(JSON.stringify(logEntry));\n}\n\nfunction logWarning(message: string, context: LogContext = {}): void {\n  const logEntry = {\n    level: 'WARNING',\n    message,\n    timestamp: new Date().toISOString(),\n    requestId: context.requestId || crypto.randomUUID(),\n    ...context\n  };\n  console.warn(JSON.stringify(logEntry));\n}\n\nfunction logInfo(message: string, context: LogContext = {}): void {\n  const logEntry = {\n    level: 'INFO',\n    message,\n    timestamp: new Date().toISOString(),\n    requestId: context.requestId || crypto.randomUUID(),\n    ...context\n  };\n  console.log(JSON.stringify(logEntry));\n}\n\n// --- Enhanced Utility Functions ---\nfunction validateDateFormat(dateStr?: string): boolean {\n  if (!dateStr) return true;\n  try {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (!regex.test(dateStr)) return false;\n    const date = new Date(dateStr);\n    return !isNaN(date.getTime()) && dateStr === date.toISOString().split('T')[0];\n  } catch (error) {\n    logError('Date validation failed', { error: error as Error, dateStr });\n    return false;\n  }\n}\n\nfunction sanitizeString(value?: string): string {\n  if (!value) return '';\n  try {\n    // Remove potentially dangerous characters and limit length\n    const sanitized = value\n      .replace(/[^\\w\\s\\-.,()[\\]']/g, '')\n      .replace(/'/g, \"''\")\n      .slice(0, 500);\n    return sanitized;\n  } catch (error) {\n    logError('String sanitization failed', { error: error as Error, value });\n    return '';\n  }\n}\n\nfunction validateEnum<T>(value: T, allowed: T[]): boolean {\n  try {\n    return allowed.includes(value);\n  } catch (error) {\n    logError('Enum validation failed', { error: error as Error, value, allowed });\n    return false;\n  }\n}\n\nfunction validateInteger(value: any, min?: number, max?: number): boolean {\n  try {\n    if (typeof value !== 'number') return false;\n    if (!Number.isInteger(value)) return false;\n    if (min !== undefined && value < min) return false;\n    if (max !== undefined && value > max) return false;\n    return true;\n  } catch (error) {\n    logError('Integer validation failed', { error: error as Error, value, min, max });\n    return false;\n  }\n}\n\n// --- Enhanced OData Query Builder ---\nfunction buildODataQuery(endpoint: string, params: Record<string, any>): Record<string, string> {\n  const query: Record<string, string> = {};\n  const filters: string[] = [];\n  \n  try {\n    // Format parameter\n    if (params.format === 'xml') query['$format'] = 'xml';\n    \n    // Pagination parameters\n    if (params.top !== undefined) query['$top'] = String(params.top);\n    if (params.skip !== undefined) query['$skip'] = String(params.skip);\n    query['$inlinecount'] = 'allpages';\n    \n    // Build endpoint-specific filters\n    switch (endpoint) {\n      case 'voting':\n        if (params.meeting_type) filters.push(`type eq '${sanitizeString(params.meeting_type)}'`);\n        if (params.start_date) filters.push(`start_date ge datetime'${params.start_date}'`);\n        if (params.end_date) filters.push(`start_date le datetime'${params.end_date}'`);\n        if (params.member_name) filters.push(`substringof('${sanitizeString(params.member_name)}', name_en)`);\n        if (params.motion_keywords) filters.push(`substringof('${sanitizeString(params.motion_keywords)}', motion_en)`);\n        if (params.term_no) filters.push(`term_no eq ${params.term_no}`);\n        break;\n        \n      case 'bills':\n        if (params.title_keywords) filters.push(`substringof('${sanitizeString(params.title_keywords)}', bill_title_eng)`);\n        if (params.gazette_year) filters.push(`year(bill_gazette_date) eq ${params.gazette_year}`);\n        if (params.gazette_start_date) filters.push(`bill_gazette_date ge datetime'${params.gazette_start_date}'`);\n        if (params.gazette_end_date) filters.push(`bill_gazette_date le datetime'${params.gazette_end_date}'`);\n        break;\n        \n      case 'questions_oral':\n      case 'questions_written':\n        if (params.subject_keywords) filters.push(`substringof('${sanitizeString(params.subject_keywords)}', SubjectName)`);\n        if (params.member_name) filters.push(`substringof('${sanitizeString(params.member_name)}', MemberName)`);\n        if (params.meeting_date) filters.push(`MeetingDate eq datetime'${params.meeting_date}'`);\n        if (params.year) filters.push(`year(MeetingDate) eq ${params.year}`);\n        break;\n        \n      default:\n        if (endpoint.startsWith('hansard')) {\n          if (params.subject_keywords) filters.push(`substringof('${sanitizeString(params.subject_keywords)}', Subject)`);\n          if (params.speaker) filters.push(`Speaker eq '${sanitizeString(params.speaker)}'`);\n          if (params.meeting_date) filters.push(`MeetingDate eq datetime'${params.meeting_date}'`);\n          if (params.year) filters.push(`year(MeetingDate) eq ${params.year}`);\n          if (params.question_type && endpoint === 'hansard_questions') {\n            filters.push(`QuestionType eq '${sanitizeString(params.question_type)}'`);\n            filters.push(`HansardType eq 'English'`);\n          }\n        }\n    }\n    \n    if (filters.length) query['$filter'] = filters.join(' and ');\n    \n  } catch (error) {\n    logError('OData query building failed', { error: error as Error, endpoint, params });\n    throw new LegCoAPIError('Failed to build query parameters', undefined, endpoint, error as Error);\n  }\n  \n  return query;\n}\n\n// --- Enhanced HTTP Client with Retry Logic ---\nasync function fetchWithRetry(url: string, options: RequestInit, maxRetries: number = 3): Promise<Response> {\n  let lastError: Error | null = null;\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n      \n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      \n      // Don't retry on client errors (4xx), only on server errors (5xx) and network issues\n      if (response.ok || (response.status >= 400 && response.status < 500)) {\n        return response;\n      }\n      \n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      \n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxRetries) {\n        break;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s\n      const delay = Math.min(1000 * Math.pow(2, attempt - 1), 10000);\n      logWarning(`Request failed, retrying in ${delay}ms`, { \n        attempt, \n        maxRetries, \n        error: error as Error, \n        url \n      });\n      \n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  throw lastError || new Error('Max retries exceeded');\n}\n\nasync function fetchOData(endpoint: string, params: Record<string, any>, requestId?: string): Promise<any> {\n  const context: LogContext = { endpoint, params, requestId };\n  \n  try {\n    const url = BASE_URLS[endpoint];\n    if (!url) {\n      throw new LegCoAPIError(`Unknown endpoint: ${endpoint}`, 400, endpoint);\n    }\n    \n    const query = buildODataQuery(endpoint, params);\n    const queryString = new URLSearchParams(query).toString();\n    const fullUrl = queryString ? `${url}?${queryString}` : url;\n    \n    const headers: Record<string, string> = {\n      'User-Agent': 'LegCo-Search-MCP/1.0',\n      'Accept': params.format === 'xml' ? 'application/xml' : 'application/json',\n      'Accept-Charset': 'utf-8',\n      'Cache-Control': 'no-cache'\n    };\n    \n    logInfo('Making API request', { ...context, url: fullUrl, headers });\n    \n    const response = await fetchWithRetry(fullUrl, { \n      method: 'GET', \n      headers \n    });\n    \n    if (!response.ok) {\n      const errorText = await response.text().catch(() => 'Unknown error');\n      throw new LegCoAPIError(\n        `API request failed: ${response.status} ${response.statusText}`,\n        response.status,\n        endpoint,\n        new Error(errorText)\n      );\n    }\n    \n    const contentType = response.headers.get('content-type') || '';\n    \n    if (params.format === 'xml') {\n      const text = await response.text();\n      return {\n        data: text,\n        format: 'xml',\n        content_type: contentType,\n        status: response.status\n      };\n    } else {\n      const data = await response.json();\n      return {\n        ...data,\n        _metadata: {\n          status: response.status,\n          content_type: contentType,\n          endpoint,\n          params\n        }\n      };\n    }\n    \n  } catch (error) {\n    logError('OData fetch failed', { ...context, error: error as Error });\n    \n    if (error instanceof LegCoAPIError) {\n      throw error;\n    }\n    \n    throw new LegCoAPIError(\n      `Failed to fetch data from ${endpoint}: ${(error as Error).message}`,\n      undefined,\n      endpoint,\n      error as Error\n    );\n  }\n}\n\n// --- Enhanced Rate Limiting ---\nconst RATE_LIMIT = 60;\nconst RATE_LIMIT_WINDOW = 60; // seconds\nconst rateLimitMap: Map<string, { window: number; count: number }> = new Map();\n\nfunction checkRateLimit(ip: string): boolean {\n  try {\n    const now = Math.floor(Date.now() / 1000);\n    const window = Math.floor(now / RATE_LIMIT_WINDOW);\n    const key = `${ip}:${window}`;\n    const entry = rateLimitMap.get(key);\n    \n    if (entry) {\n      if (entry.count >= RATE_LIMIT) {\n        logWarning('Rate limit exceeded', { ip, count: entry.count, limit: RATE_LIMIT });\n        return false;\n      }\n      entry.count++;\n    } else {\n      rateLimitMap.set(key, { window, count: 1 });\n    }\n    \n    // Clean up old entries periodically\n    if (rateLimitMap.size > 10000) {\n      const currentWindow = window;\n      for (const [k, v] of rateLimitMap.entries()) {\n        if (v.window < currentWindow - 1) { // Keep current and previous window\n          rateLimitMap.delete(k);\n        }\n      }\n    }\n    \n    return true;\n  } catch (error) {\n    logError('Rate limit check failed', { error: error as Error, ip });\n    return true; // Fail open\n  }\n}\n\n// --- Enhanced Validation Functions ---\nfunction validateSearchVotingParams(params: Record<string, any>): void {\n  if (params.meeting_type && !validateEnum(params.meeting_type, [\n    'Council Meeting', 'House Committee', 'Finance Committee', 'Establishment Subcommittee', 'Public Works Subcommittee'\n  ])) {\n    throw new ValidationError(`Invalid meeting_type: ${params.meeting_type}`, 'meeting_type');\n  }\n  \n  if (params.start_date && !validateDateFormat(params.start_date)) {\n    throw new ValidationError(`Invalid start_date format: ${params.start_date}. Use YYYY-MM-DD`, 'start_date');\n  }\n  \n  if (params.end_date && !validateDateFormat(params.end_date)) {\n    throw new ValidationError(`Invalid end_date format: ${params.end_date}. Use YYYY-MM-DD`, 'end_date');\n  }\n  \n  if (params.term_no && !validateInteger(params.term_no, 1)) {\n    throw new ValidationError(`Invalid term_no: ${params.term_no}. Must be a positive integer`, 'term_no');\n  }\n  \n  if (params.top !== undefined && !validateInteger(params.top, 1, 1000)) {\n    throw new ValidationError(`Invalid top: ${params.top}. Must be between 1 and 1000`, 'top');\n  }\n  \n  if (params.skip !== undefined && !validateInteger(params.skip, 0)) {\n    throw new ValidationError(`Invalid skip: ${params.skip}. Must be non-negative`, 'skip');\n  }\n  \n  if (params.format && !validateEnum(params.format, ['json', 'xml'])) {\n    throw new ValidationError(`Invalid format: ${params.format}. Must be 'json' or 'xml'`, 'format');\n  }\n}\n\nfunction validateSearchBillsParams(params: Record<string, any>): void {\n  if (params.gazette_year && !validateInteger(params.gazette_year, 1800, 2100)) {\n    throw new ValidationError(`Invalid gazette_year: ${params.gazette_year}. Must be between 1800 and 2100`, 'gazette_year');\n  }\n  \n  if (params.gazette_start_date && !validateDateFormat(params.gazette_start_date)) {\n    throw new ValidationError(`Invalid gazette_start_date format: ${params.gazette_start_date}. Use YYYY-MM-DD`, 'gazette_start_date');\n  }\n  \n  if (params.gazette_end_date && !validateDateFormat(params.gazette_end_date)) {\n    throw new ValidationError(`Invalid gazette_end_date format: ${params.gazette_end_date}. Use YYYY-MM-DD`, 'gazette_end_date');\n  }\n  \n  if (params.top !== undefined && !validateInteger(params.top, 1, 1000)) {\n    throw new ValidationError(`Invalid top: ${params.top}. Must be between 1 and 1000`, 'top');\n  }\n  \n  if (params.skip !== undefined && !validateInteger(params.skip, 0)) {\n    throw new ValidationError(`Invalid skip: ${params.skip}. Must be non-negative`, 'skip');\n  }\n  \n  if (params.format && !validateEnum(params.format, ['json', 'xml'])) {\n    throw new ValidationError(`Invalid format: ${params.format}. Must be 'json' or 'xml'`, 'format');\n  }\n}\n\nfunction validateSearchQuestionsParams(params: Record<string, any>): void {\n  const qtype = params.question_type ?? 'oral';\n  if (!validateEnum(qtype, ['oral', 'written'])) {\n    throw new ValidationError(`Invalid question_type: ${qtype}. Must be 'oral' or 'written'`, 'question_type');\n  }\n  \n  if (params.meeting_date && !validateDateFormat(params.meeting_date)) {\n    throw new ValidationError(`Invalid meeting_date format: ${params.meeting_date}. Use YYYY-MM-DD`, 'meeting_date');\n  }\n  \n  if (params.year && !validateInteger(params.year, 2000, 2100)) {\n    throw new ValidationError(`Invalid year: ${params.year}. Must be between 2000 and 2100`, 'year');\n  }\n  \n  if (params.top !== undefined && !validateInteger(params.top, 1, 1000)) {\n    throw new ValidationError(`Invalid top: ${params.top}. Must be between 1 and 1000`, 'top');\n  }\n  \n  if (params.skip !== undefined && !validateInteger(params.skip, 0)) {\n    throw new ValidationError(`Invalid skip: ${params.skip}. Must be non-negative`, 'skip');\n  }\n  \n  if (params.format && !validateEnum(params.format, ['json', 'xml'])) {\n    throw new ValidationError(`Invalid format: ${params.format}. Must be 'json' or 'xml'`, 'format');\n  }\n}\n\nfunction validateSearchHansardParams(params: Record<string, any>): void {\n  const htype = params.hansard_type ?? 'hansard';\n  if (!validateEnum(htype, ['hansard', 'questions', 'bills', 'motions', 'voting'])) {\n    throw new ValidationError(`Invalid hansard_type: ${htype}. Must be one of: hansard, questions, bills, motions, voting`, 'hansard_type');\n  }\n  \n  if (params.meeting_date && !validateDateFormat(params.meeting_date)) {\n    throw new ValidationError(`Invalid meeting_date format: ${params.meeting_date}. Use YYYY-MM-DD`, 'meeting_date');\n  }\n  \n  if (params.year && !validateInteger(params.year, 2000, 2100)) {\n    throw new ValidationError(`Invalid year: ${params.year}. Must be between 2000 and 2100`, 'year');\n  }\n  \n  if (params.question_type && !validateEnum(params.question_type, ['Oral', 'Written', 'Urgent'])) {\n    throw new ValidationError(`Invalid question_type: ${params.question_type}. Must be 'Oral', 'Written', or 'Urgent'`, 'question_type');\n  }\n  \n  if (params.top !== undefined && !validateInteger(params.top, 1, 1000)) {\n    throw new ValidationError(`Invalid top: ${params.top}. Must be between 1 and 1000`, 'top');\n  }\n  \n  if (params.skip !== undefined && !validateInteger(params.skip, 0)) {\n    throw new ValidationError(`Invalid skip: ${params.skip}. Must be non-negative`, 'skip');\n  }\n  \n  if (params.format && !validateEnum(params.format, ['json', 'xml'])) {\n    throw new ValidationError(`Invalid format: ${params.format}. Must be 'json' or 'xml'`, 'format');\n  }\n}\n\n// --- Enhanced MCP Tool Implementations ---\nasync function searchVotingResults(params: Record<string, any>, requestId?: string): Promise<any> {\n  try {\n    validateSearchVotingParams(params);\n    return await fetchOData('voting', params, requestId);\n  } catch (error) {\n    logError('Search voting results failed', { error: error as Error, params, requestId });\n    throw error;\n  }\n}\n\nasync function searchBills(params: Record<string, any>, requestId?: string): Promise<any> {\n  try {\n    validateSearchBillsParams(params);\n    return await fetchOData('bills', params, requestId);\n  } catch (error) {\n    logError('Search bills failed', { error: error as Error, params, requestId });\n    throw error;\n  }\n}\n\nasync function searchQuestions(params: Record<string, any>, requestId?: string): Promise<any> {\n  try {\n    validateSearchQuestionsParams(params);\n    const qtype = params.question_type ?? 'oral';\n    const endpoint = qtype === 'oral' ? 'questions_oral' : 'questions_written';\n    return await fetchOData(endpoint, params, requestId);\n  } catch (error) {\n    logError('Search questions failed', { error: error as Error, params, requestId });\n    throw error;\n  }\n}\n\nasync function searchHansard(params: Record<string, any>, requestId?: string): Promise<any> {\n  try {\n    validateSearchHansardParams(params);\n    const htype = params.hansard_type ?? 'hansard';\n    const endpointMap: Record<string, string> = {\n      hansard: 'hansard',\n      questions: 'hansard_questions',\n      bills: 'hansard_bills',\n      motions: 'hansard_motions',\n      voting: 'hansard_voting',\n    };\n    const endpoint = endpointMap[htype] || 'hansard';\n    return await fetchOData(endpoint, params, requestId);\n  } catch (error) {\n    logError('Search hansard failed', { error: error as Error, params, requestId });\n    throw error;\n  }\n}\n\n// --- Enhanced Error Response Function ---\nfunction createErrorResponse(error: Error, requestId?: string): Response {\n  let statusCode = 500;\n  let errorCode = 'INTERNAL_ERROR';\n  let message = 'An internal server error occurred';\n  \n  if (error instanceof ValidationError) {\n    statusCode = 400;\n    errorCode = 'VALIDATION_ERROR';\n    message = error.message;\n  } else if (error instanceof LegCoAPIError) {\n    statusCode = error.statusCode || 500;\n    errorCode = 'API_ERROR';\n    message = error.message;\n  } else if (error instanceof RateLimitError) {\n    statusCode = 429;\n    errorCode = 'RATE_LIMIT_EXCEEDED';\n    message = error.message;\n  }\n  \n  const errorResponse = {\n    error: {\n      code: errorCode,\n      message,\n      requestId,\n      timestamp: new Date().toISOString()\n    }\n  };\n  \n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n  };\n  \n  if (error instanceof RateLimitError && error.retryAfter) {\n    headers['Retry-After'] = String(error.retryAfter);\n  }\n  \n  return new Response(JSON.stringify(errorResponse), {\n    status: statusCode,\n    headers\n  });\n}\n\n// --- WebSocket Handler ---\nfunction handleWebSocket(request: Request, requestId: string): Response {\n  const upgradeHeader = request.headers.get('Upgrade');\n  if (!upgradeHeader || upgradeHeader !== 'websocket') {\n    return new Response('Expected websocket upgrade', { status: 400 });\n  }\n\n  const webSocketPair = new WebSocketPair();\n  const [client, server] = Object.values(webSocketPair);\n\n  server.accept();\n  \n  server.addEventListener('message', async (event) => {\n    try {\n      const data = JSON.parse(event.data as string);\n      logInfo('WebSocket message received', { data, requestId });\n      \n      let response: any;\n      \n      if (data.method === 'initialize') {\n        response = {\n          jsonrpc: '2.0',\n          id: data.id,\n          result: {\n            protocolVersion: '2024-11-05',\n            capabilities: {\n              tools: {\n                listChanged: false\n              }\n            },\n            serverInfo: {\n              name: 'LegCo Search MCP Server',\n              version: '0.1.0'\n            }\n          }\n        };\n      } else if (data.method === 'tools/list') {\n        response = {\n          jsonrpc: '2.0',\n          id: data.id,\n          result: {\n            tools: [\n              {\n                name: 'search_voting_results',\n                description: 'Search voting results from LegCo meetings',\n                inputSchema: {\n                  type: 'object',\n                  properties: {\n                    meeting_type: { type: 'string' },\n                    start_date: { type: 'string' },\n                    end_date: { type: 'string' },\n                    member_name: { type: 'string' },\n                    motion_keywords: { type: 'string' },\n                    term_no: { type: 'integer' },\n                    top: { type: 'integer', default: 100 },\n                    skip: { type: 'integer', default: 0 },\n                    format: { type: 'string', default: 'json' },\n                  },\n                },\n              },\n              {\n                name: 'search_bills',\n                description: 'Search bills from LegCo database',\n                inputSchema: {\n                  type: 'object',\n                  properties: {\n                    title_keywords: { type: 'string' },\n                    gazette_year: { type: 'integer' },\n                    gazette_start_date: { type: 'string' },\n                    gazette_end_date: { type: 'string' },\n                    top: { type: 'integer', default: 100 },\n                    skip: { type: 'integer', default: 0 },\n                    format: { type: 'string', default: 'json' },\n                  },\n                },\n              },\n              {\n                name: 'search_questions',\n                description: 'Search questions at Council meetings',\n                inputSchema: {\n                  type: 'object',\n                  properties: {\n                    question_type: { type: 'string', default: 'oral' },\n                    subject_keywords: { type: 'string' },\n                    member_name: { type: 'string' },\n                    meeting_date: { type: 'string' },\n                    year: { type: 'integer' },\n                    top: { type: 'integer', default: 100 },\n                    skip: { type: 'integer', default: 0 },\n                    format: { type: 'string', default: 'json' },\n                  },\n                },\n              },\n              {\n                name: 'search_hansard',\n                description: 'Search Hansard (official records of proceedings)',\n                inputSchema: {\n                  type: 'object',\n                  properties: {\n                    hansard_type: { type: 'string', default: 'hansard' },\n                    subject_keywords: { type: 'string' },\n                    speaker: { type: 'string' },\n                    meeting_date: { type: 'string' },\n                    year: { type: 'integer' },\n                    question_type: { type: 'string' },\n                    top: { type: 'integer', default: 100 },\n                    skip: { type: 'integer', default: 0 },\n                    format: { type: 'string', default: 'json' },\n                  },\n                },\n              },\n            ]\n          }\n        };\n      } else if (data.method === 'tools/call') {\n        const toolName = data.params?.name;\n        const arguments_ = data.params?.arguments || {};\n        \n        if (!toolName) {\n          throw new ValidationError('Missing tool name in request');\n        }\n        \n        let result: any;\n        switch (toolName) {\n          case 'search_voting_results':\n            result = await searchVotingResults(arguments_, requestId);\n            break;\n          case 'search_bills':\n            result = await searchBills(arguments_, requestId);\n            break;\n          case 'search_questions':\n            result = await searchQuestions(arguments_, requestId);\n            break;\n          case 'search_hansard':\n            result = await searchHansard(arguments_, requestId);\n            break;\n          default:\n            throw new ValidationError(`Unknown tool: ${toolName}`);\n        }\n        \n        response = {\n          jsonrpc: '2.0',\n          id: data.id,\n          result: {\n            content: [\n              {\n                type: 'text',\n                text: JSON.stringify(result, null, 2),\n              },\n            ],\n          }\n        };\n      } else {\n        response = {\n          jsonrpc: '2.0',\n          id: data.id,\n          error: {\n            code: -32601,\n            message: `Method not found: ${data.method}`\n          }\n        };\n      }\n      \n      server.send(JSON.stringify(response));\n      \n    } catch (error) {\n      logError('WebSocket error', { error: error as Error, requestId });\n      \n      const errorResponse = {\n        jsonrpc: '2.0',\n        id: (event.data as any)?.id || null,\n        error: {\n          code: -32603,\n          message: (error as Error).message\n        }\n      };\n      \n      server.send(JSON.stringify(errorResponse));\n    }\n  });\n\n  return new Response(null, {\n    status: 101,\n    webSocket: client,\n  });\n}\n\n// --- Main Worker Handler ---\nexport default {\n  async fetch(request: Request, env: any, ctx: ExecutionContext): Promise<Response> {\n    const requestId = crypto.randomUUID();\n    const url = new URL(request.url);\n    const method = request.method;\n    const ip = request.headers.get('CF-Connecting-IP') || request.headers.get('x-forwarded-for') || 'unknown';\n    \n    try {\n      logInfo('Request received', { method, url: url.pathname, ip, requestId });\n      \n      // CORS preflight\n      if (method === 'OPTIONS') {\n        return new Response(null, {\n          status: 200,\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization, Upgrade, Connection',\n            'Access-Control-Max-Age': '86400',\n          },\n        });\n      }\n\n      // WebSocket endpoint for MCP\n      if (url.pathname.endsWith('/mcp')) {\n        const upgradeHeader = request.headers.get('Upgrade');\n        if (upgradeHeader && upgradeHeader.toLowerCase() === 'websocket') {\n          return handleWebSocket(request, requestId);\n        }\n        \n        // Return info for non-WebSocket requests\n        return new Response(\n          JSON.stringify({\n            message: 'This endpoint supports WebSocket connections for MCP protocol',\n            usage: 'Connect via WebSocket with MCP JSON-RPC messages',\n            protocol: 'MCP 2024-11-05',\n            auth: 'none'\n          }),\n          {\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          }\n        );\n      }\n\n      // Health check endpoint\n      if (url.pathname.endsWith('/health')) {\n        return new Response(\n          JSON.stringify({\n            status: 'healthy',\n            service: 'LegCo Search MCP Server',\n            version: '0.1.0',\n            timestamp: new Date().toISOString(),\n            requestId\n          }),\n          {\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          }\n        );\n      }\n\n      // MCP SSE endpoint\n      if (url.pathname.endsWith('/sse')) {\n        if (method === 'GET') {\n          return new Response(\n            JSON.stringify({\n              message: 'This endpoint expects POST requests for MCP tool calls. No authentication is required.',\n              usage: 'POST /sse with { \"method\": \"tools/call\", ... }',\n              auth: 'none'\n            }),\n            {\n              status: 200,\n              headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n              },\n            }\n          );\n        }\n        if (method !== 'POST') {\n          throw new ValidationError('Only POST requests are supported for MCP endpoint');\n        }\n        \n        // Rate limiting\n        if (!checkRateLimit(ip)) {\n          throw new RateLimitError(\n            `Rate limit exceeded: ${RATE_LIMIT} requests per ${RATE_LIMIT_WINDOW} seconds.`,\n            RATE_LIMIT_WINDOW\n          );\n        }\n        \n        let req: any;\n        try {\n          req = await request.json();\n        } catch (error) {\n          throw new ValidationError('Invalid JSON in request body');\n        }\n        \n        if (req.method === 'initialize') {\n          return new Response(\n            JSON.stringify({\n              jsonrpc: '2.0',\n              id: req.id,\n              result: {\n                protocolVersion: '2024-11-05',\n                capabilities: {\n                  tools: {\n                    listChanged: false\n                  }\n                },\n                serverInfo: {\n                  name: 'LegCo Search MCP Server',\n                  version: '0.1.0'\n                }\n              },\n              requestId,\n              timestamp: new Date().toISOString()\n            }),\n            {\n              headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n              },\n            }\n          );\n        } else if (req.method === 'tools/list') {\n          return new Response(\n            JSON.stringify({\n              jsonrpc: '2.0',\n              id: req.id,\n              result: {\n                tools: [\n                  {\n                    name: 'search_voting_results',\n                    description: 'Search voting results from LegCo meetings',\n                    inputSchema: {\n                      type: 'object',\n                      properties: {\n                        meeting_type: { type: 'string' },\n                        start_date: { type: 'string' },\n                        end_date: { type: 'string' },\n                        member_name: { type: 'string' },\n                        motion_keywords: { type: 'string' },\n                        term_no: { type: 'integer' },\n                        top: { type: 'integer', default: 100 },\n                        skip: { type: 'integer', default: 0 },\n                        format: { type: 'string', default: 'json' },\n                      },\n                    },\n                  },\n                  {\n                    name: 'search_bills',\n                    description: 'Search bills from LegCo database',\n                    inputSchema: {\n                      type: 'object',\n                      properties: {\n                        title_keywords: { type: 'string' },\n                        gazette_year: { type: 'integer' },\n                        gazette_start_date: { type: 'string' },\n                        gazette_end_date: { type: 'string' },\n                        top: { type: 'integer', default: 100 },\n                        skip: { type: 'integer', default: 0 },\n                        format: { type: 'string', default: 'json' },\n                      },\n                    },\n                  },\n                  {\n                    name: 'search_questions',\n                    description: 'Search questions at Council meetings',\n                    inputSchema: {\n                      type: 'object',\n                      properties: {\n                        question_type: { type: 'string', default: 'oral' },\n                        subject_keywords: { type: 'string' },\n                        member_name: { type: 'string' },\n                        meeting_date: { type: 'string' },\n                        year: { type: 'integer' },\n                        top: { type: 'integer', default: 100 },\n                        skip: { type: 'integer', default: 0 },\n                        format: { type: 'string', default: 'json' },\n                      },\n                    },\n                  },\n                  {\n                    name: 'search_hansard',\n                    description: 'Search Hansard (official records of proceedings)',\n                    inputSchema: {\n                      type: 'object',\n                      properties: {\n                        hansard_type: { type: 'string', default: 'hansard' },\n                        subject_keywords: { type: 'string' },\n                        speaker: { type: 'string' },\n                        meeting_date: { type: 'string' },\n                        year: { type: 'integer' },\n                        question_type: { type: 'string' },\n                        top: { type: 'integer', default: 100 },\n                        skip: { type: 'integer', default: 0 },\n                        format: { type: 'string', default: 'json' },\n                      },\n                    },\n                  },\n                ],\n              },\n              requestId,\n              timestamp: new Date().toISOString()\n            }),\n            {\n              headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n              },\n            }\n          );\n        } else if (req.method === 'tools/call') {\n          const params = req.params || {};\n          const toolName = params.name;\n          const arguments_ = params.arguments || {};\n          \n          if (!toolName) {\n            throw new ValidationError('Missing tool name in request');\n          }\n          \n          let result: any;\n          switch (toolName) {\n            case 'search_voting_results':\n              result = await searchVotingResults(arguments_, requestId);\n              break;\n            case 'search_bills':\n              result = await searchBills(arguments_, requestId);\n              break;\n            case 'search_questions':\n              result = await searchQuestions(arguments_, requestId);\n              break;\n            case 'search_hansard':\n              result = await searchHansard(arguments_, requestId);\n              break;\n            default:\n              throw new ValidationError(`Unknown tool: ${toolName}`);\n          }\n          \n          logInfo('Tool call completed successfully', { toolName, requestId });\n          \n          return new Response(\n            JSON.stringify({\n              jsonrpc: '2.0',\n              id: req.id,\n              result: {\n                content: [\n                  {\n                    type: 'text',\n                    text: JSON.stringify(result, null, 2),\n                  },\n                ],\n              },\n              requestId,\n              timestamp: new Date().toISOString()\n            }),\n            {\n              headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n              },\n            }\n          );\n        } else {\n          return new Response(\n            JSON.stringify({\n              jsonrpc: '2.0',\n              id: req.id || null,\n              error: {\n                code: -32601,\n                message: `Method not found: ${req.method}`\n              },\n              requestId,\n              timestamp: new Date().toISOString()\n            }),\n            {\n              status: 404,\n              headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n              },\n            }\n          );\n        }\n      }\n\n      // OAuth/OpenID Connect endpoints\n      if (\n        url.pathname.startsWith('/.well-known/oauth-authorization-server') ||\n        url.pathname.startsWith('/.well-known/openid-configuration')\n      ) {\n        return new Response(\n          JSON.stringify({\n            error: \"OAuth/OpenID Connect is not supported. This is an authless API.\"\n          }),\n          {\n            status: 404,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          }\n        );\n      }\n\n      // Default response for unknown endpoints\n      return new Response(\n        JSON.stringify({\n          service: 'LegCo Search MCP Server',\n          version: '0.1.0',\n          description: 'Hong Kong Legislative Council Search MCP Server',\n          endpoints: {\n            health: '/health',\n            mcp_http: '/sse',\n            mcp_websocket: '/mcp',\n          },\n          protocols: ['HTTP', 'WebSocket'],\n          auth: 'none',\n          requestId,\n          timestamp: new Date().toISOString()\n        }),\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n          },\n        }\n      );\n      \n    } catch (error) {\n      logError('Request failed', { error: error as Error, method, url: url.pathname, ip, requestId });\n      return createErrorResponse(error as Error, requestId);\n    }\n  },\n}; ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/yellowcandle/dev/legco-search-mcp/src/worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/yellowcandle/dev/legco-search-mcp/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/yellowcandle/dev/legco-search-mcp/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/yellowcandle/dev/legco-search-mcp/src/worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/yellowcandle/dev/legco-search-mcp/.wrangler/tmp/bundle-0tk5fh/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/yellowcandle/dev/legco-search-mcp/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/yellowcandle/dev/legco-search-mcp/.wrangler/tmp/bundle-0tk5fh/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/yellowcandle/dev/legco-search-mcp/.wrangler/tmp/bundle-0tk5fh/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
